version: '3.9'
services:
  db:
    image: postgres:15.3-alpine
    container_name: db
    restart: always
    volumes:
      - db_value:/var/lib/postgresql/data/
    env_file:
      - ./.env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 1s
      timeout: 5s
      retries: 10

  chadburn:
    image: premoweb/chadburn:latest
    container_name: chadburn
    depends_on:
      - backend
    command: daemon
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

  backend:
    image: ${DOCKER_HUB_USERNAME}/amr:latest
    container_name: backend
    restart: always
    volumes:
      - static_value:/app/static/
      - media_value:/app/media/
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ./.env
    labels:
      chadburn.enabled: "true"
      chadburn.job-exec.datecron.schedule: "@every 51m"
      chadburn.job-exec.datecron.command: "python manage.py runcrons"

  frontend:
    image: ${FRONTEND_DOCKERHUB_USERNAME}/amr:latest
    container_name: frontend
    restart: always
    ports:
      - "3000:3000"

  nginx:
    image: nginx:1.25.1-alpine
    container_name: nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./certbot/letsencrypt:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/letsencrypt:ro
      - static_value:/var/html/static/
      - media_value:/var/html/media/
    depends_on:
      - backend

  certbot:
    image: nbraun1/certbot
    container_name: certbot
    depends_on:
      - nginx
    environment:
      EMAIL: agropark.robot@gmail.com
      DOMAINS: agropark.acceleratorpracticum.ru
      AUTHENTICATOR: webroot
      WEBROOT_PATH: /var/www/letsencrypt
      POST_HOOK_CMD: docker kill -s HUP $$(docker ps --filter "name=nginx" | awk '{print $$1}')
      CRON: "0 0 1 * *"
    volumes:
      - ./certbot/letsencrypt:/etc/letsencrypt
      - ./certbot/www:/var/www/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro

volumes:
  db_value:
  static_value:
  media_value:
